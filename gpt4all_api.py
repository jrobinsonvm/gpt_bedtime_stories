## I want to build a python flask app that chats with GPT4ALL to generate bedtime stories based on user input.
## I want to use the GPT4ALL API to generate bedtime stories based on user input.
from flask import Blueprint, jsonify , request
from gpt4all import GPT4All
import logging
from werkzeug.exceptions import BadRequest


gpt4all_api_blueprint = Blueprint('gpt4all_api', __name__)

logger = logging.getLogger(__name__)

# Write a POST method that accepts values for mood, event, and name.
# Use the values to update the messages dictionary. Parameterize the values in messages to be replaced with the values from the POST method.
# Return the value of the content key from the messages dictionary.
@gpt4all_api_blueprint.route('/api/v1/resources/gpt4all', methods=['POST'])
def set_params():
    logger.debug('Received a request to /api/v1/resources/gpt4all')

    """
    Accepts POST request with parameters mood, event, name, and age.
    Returns a story generated by GPT4ALL based on the parameters.
    """
    model = request.json.get('model')
    mood = request.json.get('mood')
    event = request.json.get('event')
    name = request.json.get('name')
    age = request.json.get('age')

    validate_parameters(model, mood, event, name, age)
    logger.info('Parameters validated successfully')

    gptj = GPT4All(model)

    messages = [
        {
            "role": "user", 
            "content": f"You are an expert story teller and children's book author for kids who are {age} years old. Generate a bedtime story for {name} who is a child that is {mood}, base your bedtime story about {event}."
        }
    ]    
    logger.info('Generated bedtime story successfully')
    response = jsonify(gptj.chat_completion(messages)['choices'][0]['message']['content'])
    # gptj.close()  # Close the GPT4All instance after each request to release resources
    return response
    # return jsonify(gptj.chat_completion(messages)['choices'][0]['message']['content'])

def validate_parameters(model, mood, event, name, age):
    # Check if any of the parameters are missing
    # if mood is None or event is None or name is None:
    #     raise bad_request('One or more parameters are missing.')
    if mood is None:
        raise BadRequest('Mood is missing.')
    elif event is None:
        raise BadRequest('Event is missing.')
    elif name is None:
        raise BadRequest('Name is missing.')
    elif age is None:
        raise BadRequest('Age is missing.')
    elif model is None:
        raise BadRequest('Model is missing.')
